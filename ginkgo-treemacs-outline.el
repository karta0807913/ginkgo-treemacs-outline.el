;;; ginkgo-treemacs-outline.el --- Ginkgo test outline integration with treemacs

;; Author: karta0807913 <karta0807913@gmail.com>
;; HomePage: https://github.com/karta0807913/ginkgo-treemacs-outline.el
;; Version: 0.1.0
;; Package-Requires: ((emacs "27.1") (dash "2.18.0") (treemacs "2.5"))
;; Keywords: tools, convenience, ginkgo, golang

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; This Emacs package provides a Ginkgo test framework outline view for better
;; navigation and management of Ginkgo test suites in an Emacs buffer using treemacs.
;; Binary `ginkgo' and `treemacs' integration.

;;; Code:

(require 'treemacs)

(defconst ginkgo-treemacs-outline-buffer-name "*Ginkgo Outline*")

(defcustom ginkgo-treemacs-outline-position-params
  '((side . right))
  "This parameter indicate where should the ginkgo-treemacs-outline appears.")

(defvar-local ginkgo-treemacs-outline--treemacs-tree nil)
(defvar-local ginkgo-treemacs-outline--reference-buffer nil)

(defun ginkgo-treemacs-outline--hide-other-blocks (parent current)
  "Hide all sibling blocks of CURRENT within PARENT in Emacs code folding.
This manipulates the hidden state of blocks outside the current one,
providing a focus on the desired test outline location by excluding others."
  (mapcar (lambda (item)
            (unless (eq current item)
              (save-excursion
                (goto-char (plist-get item :end))
                (hs-hide-block))))
          (plist-get parent :children))
  (when-let ((grand (plist-get parent :parent)))
    (ginkgo-treemacs-outline--hide-other-blocks grand parent)))

(defun ginkgo-treemacs-outline--ret-action (&rest _)
  "This function handles the action when returning (clicking or selecting) a node in the Ginkgo treemacs outline.  It extracts the item from the node at the current point, switch to the buffer that is referencing the Ginkgo test, navigates to the start position of the test item, show the hidden block if it was previously collapsed, and hides all other sibling blocks to focus on the selected test block.  This helps in isolating and directly navigating to specific test in large Ginkgo test suites."
  (let ((item (-> (treemacs-node-at-point)
                  (button-get :item)))
        (buffer (current-buffer)))
    (pop-to-buffer ginkgo-treemacs-outline--reference-buffer)
    (goto-char (plist-get item :start))
    (hs-show-block)
    (goto-char (plist-get item :start))
    (ginkgo-treemacs-outline--hide-other-blocks (plist-get item :parent) item)))

(defun ginkgo-treemacs-outline--expand-icon (item expand?)
  "Return the appropriate icon for an item in the ginkgo-treemacs-outline.
ITEM is generated by `ginkgo-treemacs-outline--build-entry-point'.
EXPAND? indicate is the node expanded."
  (if (plist-get item :children)
      (if expand? "▾ " "▸ ")
    "◉ "))

(treemacs-define-expandable-node-type ginkgo-treemacs-outline-treemacs-node
  :closed-icon (ginkgo-treemacs-outline--expand-icon item nil)
  :open-icon (ginkgo-treemacs-outline--expand-icon item t)
  :label (plist-get item :label)
  :key (plist-get item :key)
  :children (plist-get item :children)
  :child-type 'ginkgo-treemacs-outline-treemacs-node
  :ret-action 'ginkgo-treemacs-outline--ret-action
  :async? nil)

(treemacs-define-variadic-entry-node-type ginkgo-treemacs-outline-treemacs-root
  :key 'ginkgo-treemacs-outline-treemacs-root
  :children ginkgo-treemacs-outline--treemacs-tree
  :ret-action (hs-show-block (plist-get item :start))
  :child-type 'ginkgo-treemacs-outline-treemacs-node)

(defun ginkgo-treemacs-outline--build-entry-point (hashmap)
  "Build tree nodes for treemacs when given a HASHMAP representing a Ginkgo test structure."
  (let ((item (list :key (gethash "start" hashmap)
                    :start (gethash "start" hashmap)
                    :end (gethash "end" hashmap)
                    :parent nil
                    ;; :hashmap hashmap
                    :label (format "%s %s"
                                   (gethash "name" hashmap)
                                   (gethash "text" hashmap))
                    :children (-map
                               'ginkgo-treemacs-outline--build-entry-point
                               (gethash "nodes" hashmap)))))
    (plist-put item :children
               (mapcar
                (lambda (child)
                  (plist-put child :parent item))
                (plist-get item :children)))))

(defun ginkgo-treemacs-outline ()
"The main entry point for displaying a Ginkgo test outline in a treemacs view.

When invoked, this function does the following:
- Enables `hs-minor-mode` for code folding.
- Runs the 'ginkgo outline' command using `shell-command-to-string' to get an outline of the Ginkgo tests in JSON format from the current buffer's file.
- Parses the JSON response to build a treemacs-compatible tree structure.
- Displays this tree in a dedicated treemacs buffer on the side of the screen specified in `ginkgo-treemacs-outline-position-params'.
- Sets the reference buffer to the current buffer so actions on the treemacs nodes can interact with the original test code."
  (interactive)
  (hs-minor-mode 1)
  (let ((tree (->> (format "ginkgo outline --format json '%s'" (buffer-file-name))
                   (shell-command-to-string)
                   (json-parse-string)
                   (-map 'ginkgo-treemacs-outline--build-entry-point)))
        (code-buffer (current-buffer))
        (buffer (get-buffer-create "*ginkgo outline*")))
    (select-window (display-buffer-in-side-window buffer ginkgo-treemacs-outline-position-params))
    (with-current-buffer (get-buffer-create ginkgo-treemacs-outline-buffer-name)
      (treemacs-initialize ginkgo-treemacs-outline-treemacs-root
        :with-expand-depth 0
        :and-do (progn
                  (setq-local ginkgo-treemacs-outline--treemacs-tree tree)
                  (setq-local ginkgo-treemacs-outline--reference-buffer code-buffer))))))

(provide ginkgo-treemacs-outline)
;;; ginkgo-treemacs-outline.el ends here
